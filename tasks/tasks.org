#+STARTUP: content logdone hideblocks
#+TODO: TASK(t!) | DONE(d) CANCEL(c)
#+TODO: BUG(b!) | FIXED(f) REJECT(r)
#+PRIORITIES: A F C
#+TAGS: current(c) testing(t)
#+CONSTANTS: last_issue_id=10

* Задачи
  :PROPERTIES:
  :COLUMNS:  %3issue_id(ID) %4issue_type(TYPE) %TODO %40ITEM %SCHEDULED %DEADLINE %1PRIORITY
  :ARCHIVE:  tasks_archive.org::* Архив задач
  :END:

** TASK Добавить использование бинарников в описании директории
   :PROPERTIES:
   :issue_id: 5
   :issue_type: task
   :END:

   [2017-05-09 Вт]

   Нужно иметь возможность вставить любые данные в пределах допустимой
   длины описания директории. Это может быть бинарный файл, нули из
   нулевого устройства или просто рандомные байты.

** TASK Сделать xor-шифрование заголовков директорий и файлов
   :PROPERTIES:
   :issue_id: 6
   :issue_type: task
   :END:

   [2017-05-09 Вт]

   Шифроваться должен заголовок и содержимое слитно. Для чтения только
   заголовка, нужно запоминать, на каком байте пароля
   остановился. Если потом нужно расшифровать содержимое, нужно
   продолжать с этого байта, на котором остановился.

** TASK Сделать структуру каталога и файлов в нём для записи
   :PROPERTIES:
   :issue_id: 7
   :issue_type: task
   :END:

   [2017-05-09 Вт]

   Должны быть операции записи и добавления. При записи должен
   создаваться каталог, следом должен идти файл или очередь
   файлов. Сам каталог хранит описание своего хранилища и количество
   файлов в нём. Сами файлы хранят свои имена, свои контрольные суммы
   содержимого. При записи файла он должен читаться обратно с
   проверкой контрольной суммы. При добавлении нужно сохранять адрес
   каталога, чтобы после добавления увеличить число файлов в
   каталоге. При сбое записи файла число файлов в каталоге должно
   остаться прежним.

** TASK Сделать чтение каталога с файлами и вывод информации
   :PROPERTIES:
   :issue_id: 8
   :issue_type: task
   :END:

   [2017-05-09 Вт]

   При чтении каталога, нужно иметь возможность прочитать содержимое
   каталога в виде имён файлов и их размеров. Нужно иметь возможность
   проверить целостность записанных файлов по контрольным суммам без
   извлечения самих файлов.

** TASK Сделать добавление файла в пустую директорию
   :PROPERTIES:
   :issue_id: 9
   :issue_type: task
   :END:

** TASK Оптимизировать посимвольную промотку offset'а
   :PROPERTIES:
   :issue_id: 10
   :issue_type: task
   :END:

   [2017-05-11 Чт]

   Так как промотка offset'а выполняется посимвольно, на мегабайтных
   файлах это занимает несколько секунд (что заметно), а на
   гигабайтных файлах это занимает минуты (что надоедает).

   Надо либо сделать блочную промотку, либо использовать как-то
   fseek().


* Баги
  :PROPERTIES:
  :COLUMNS:  %3issue_id(ID) %4issue_type(TYPE) %TODO %40ITEM %SCHEDULED %DEADLINE %1PRIORITY
  :ARCHIVE:  tasks_archive.org::* Архив багов
  :END:


* Окружение
  :PROPERTIES:
  :COLUMNS:  %3issue_id(ID) %4issue_type(TYPE) %TODO %40ITEM %SCHEDULED %DEADLINE %1PRIORITY
  :ARCHIVE:  tasks_archive.org::* Архив окружения
  :END:

** TASK Добавить в Makefile отладочную команду
   :PROPERTIES:
   :issue_id: 3
   :issue_type: task
   :END:

   [2017-05-09 Вт]

   Так как часто надо посмотреть внутренности при выполнении
   программы, нужно сделать команду (или набор команд) для отладочной
   компиляции и отладочного запуска. В результате должна стать
   доступна удобная отладка из gdb.

** TASK Добавить в Makefile тестировочную команду
   :PROPERTIES:
   :issue_id: 4
   :issue_type: task
   :END:

   [2017-05-09 Вт]

   Иногда надо по-быстрому обложить что-то тестами, когда точно не
   знаешь, как оно работает. Поэтому нужна инфраструктура, в которую
   можно быстро добавлять тесты и которые потом можно быстро
   скомпилировать и быстро запустить.
